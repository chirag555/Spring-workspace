package webapp.services;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import webapp.entity.Logger;
import webapp.entity.Post;
import webapp.repository.postsRepository;


@Service
public class PostsService {

	@Autowired
	private postsRepository repo;
	RestTemplate restTemplate = new RestTemplate();
	Post tempPost = new Post();
	String url = "http://localhost:8090/loggers/";
	Logger tempLogger = new Logger();
	ObjectMapper mapper = new ObjectMapper();
	Date date=new Date();
	String jsonStringPost;
	String jsonStringLogger;
	String beforeSnapshot ;
	// HttpHeaders httpHeaders = restTemplate.headForHeaders(url);
	// HttpEntity<Post> request = new HttpEntity<>(new Post());

	public List<Post> getPosts() {
		List<Post> posts = new ArrayList<>();
		for (Post post : repo.findAll()) {
			posts.add(post);
		}
		return posts;
	}

	public Post getPosts(int id) {
		return repo.findById(id).get();

	}

	public String addPost(Post post) throws JsonProcessingException {
	
		repo.save(post);		
		jsonStringPost = mapper.writeValueAsString(post);
		tempLogger.setAfterSnapshot(jsonStringPost);
		tempLogger.setBeforeSnapshot(jsonStringPost);
		// hard-coded require some code to get actual users
		tempLogger.setEntityName("InsertPost");
		tempLogger.setUserId(post.getId()+"");		
		tempLogger=restTemplate.postForObject(url, tempLogger, Logger.class);
		
		jsonStringLogger=mapper.writeValueAsString(tempLogger);
		return jsonStringPost+" "+jsonStringLogger;

	}

	public String updatePost(Post post) throws JsonProcessingException {
		//beforeSavingData
		tempPost =this.getPosts(post.getId());
		beforeSnapshot = mapper.writeValueAsString(tempPost);
		repo.save(post);
		
		//AfterSavingData
		String afterSnapshot = mapper.writeValueAsString(post);
		tempLogger.setAfterSnapshot(afterSnapshot);
		tempLogger.setBeforeSnapshot(beforeSnapshot);
		tempLogger.setEntityName("UpdatePost");
		tempLogger.setUserId(""+post.getId());
		tempLogger=restTemplate.postForObject(url, tempLogger, Logger.class);
		
		jsonStringLogger=mapper.writeValueAsString(tempLogger);
		return jsonStringPost+" "+jsonStringLogger;

	}

	public void deletePost(int id) {
		repo.deleteById(id);
	}

}